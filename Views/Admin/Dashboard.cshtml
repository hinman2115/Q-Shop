@model List<QShop.Models.ViewModel.NewFolder.ProductView>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Products</title>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="~/css/Manageproduct.css" rel="stylesheet">

</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h2 class="dashboard-title">Product Management</h2>
            <div class="action-buttons">
                <a asp-controller="Admin" asp-action="AddProduct" class="btn btn-add-product">
                    <i class="fas fa-plus"></i> Add New Product
                </a>
                <a asp-controller="Ordermanage" asp-action="Order" class="btn btn-order">
                    <i class="fas fa-clipboard-list"></i> Pending Order
                </a>
            </div>
        </div>

        <div class="card product-card">
            <div class="card-header">
                <span class="card-title">Product List</span>
                <div class="search-container">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" class="form-control search-input" id="searchProducts" placeholder="Search products...">
                </div>
            </div>

            <div class="table-responsive">
                <table class="table product-table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Area</th>
                            <th>Category</th>
                            <th>Image</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        @foreach (var product in Model)
                        {
                            <tr id="product-@product.ProductId" data-product-id="@product.ProductId">
                                <td>
                                    <span class="product-name">@product.ProductName</span>
                                </td>
                                <td>
                                    <span class="price-tag">₹@product.Price.ToString("F2")</span>
                                </td>
                                <td>
                                    @{
                                        string stockClass = product.StockQuantity > 20 ? "stock-high" :
                                        (product.StockQuantity > 5 ? "stock-medium" : "stock-low");
                                    }
                                    <span class="badge @stockClass">@product.StockQuantity</span>
                                </td>
                                <td>
                                    <span class="area-badge">Area @product.AreaId</span>
                                </td>
                                <td>
                                    <span class="category-badge">Cat @product.CategoryId</span>
                                </td>
                                <td>
                                    <div class="product-image-container">
                                        <img src="@product.PImage" class="product-img" alt="@product.ProductName" />
                                    </div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <a href="@Url.Action("EditProduct", "ManageProduct", new { id = product.ProductId })" class="btn btn-edit">
                                            <i class="fas fa-pencil-alt"></i> Edit
                                        </a>
                                        <button class="btn btn-delete" data-product-id="@product.ProductId">
                                            <i class="fas fa-trash-alt"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="card-footer">
                <nav aria-label="Product pagination">
                    <ul class="pagination justify-content-center" id="pagination">
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous" id="prevPage">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#" data-page="1">1</a></li>
                        <li class="page-item"><a class="page-link" href="#" data-page="2">2</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Next" id="nextPage">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this product?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">
            <div class="toast-header">
                <i class="fas fa-bell me-2"></i>
                <strong class="me-auto" id="toast-title">Notification</strong>
                <small class="text-muted">Just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="toast-message">
                Message goes here
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/.js"></script>

    <script>
               let productToDelete = null;

        // Initialize Bootstrap modal
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));

        // Add event listeners for delete buttons
        document.addEventListener('DOMContentLoaded', function() {
            // Set up delete button listeners
            const deleteButtons = document.querySelectorAll('.btn-delete');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    productToDelete = this.getAttribute('data-product-id');
                    deleteModal.show();
                });
            });

            // Set up confirm delete button
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            confirmDeleteBtn.addEventListener('click', function() {
                if (!productToDelete) return;

                // Make AJAX call to delete the product
                 fetch(`/Admin/DeleteProduct/${productToDelete}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Remove the product row from the table
                    const productRow = document.getElementById(`product-${productToDelete}`);
                    if (productRow) {
                        productRow.remove();
                    }

                    // Show success message
                    showToast('Success', 'Product deleted successfully', 'success');

                    // Update pagination if needed
                    updatePagination();
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error', 'Failed to delete product', 'error');
                })
                .finally(() => {
                    // Close the modal
                    deleteModal.hide();
                    productToDelete = null;
                });
            });
        });

        // Function to show toast notifications
        function showToast(title, message, type) {
            const toastContainer = document.querySelector('.toast');
            const toastTitle = document.getElementById('toast-title');
            const toastMessage = document.getElementById('toast-message');

            toastTitle.textContent = title;
            toastMessage.textContent = message;

            // Add appropriate styling based on notification type
            toastContainer.classList.remove('bg-success', 'bg-danger', 'bg-warning');
            if (type === 'success') {
                toastContainer.classList.add('bg-success', 'text-white');
            } else if (type === 'error') {
                toastContainer.classList.add('bg-danger', 'text-white');
            } else if (type === 'warning') {
                toastContainer.classList.add('bg-warning');
            }

            const toast = new bootstrap.Toast(toastContainer);
            toast.show();
        }

        // Function to update pagination based on remaining products
        function updatePagination() {
            const productCount = document.querySelectorAll('#productTableBody tr').length;
            const paginationElement = document.getElementById('pagination');

            // Simple logic - hide pagination if few products remain
            if (productCount <= 10) {
                document.querySelector('.page-item:nth-child(2)').classList.add('active');
                document.querySelector('.page-item:nth-child(3)').classList.add('d-none');
            }
        }
    </script>
</body>

</html>